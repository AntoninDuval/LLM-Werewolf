from player.base_player import Player
from typing import Callable, List

class LLMPlayer(Player):
    def __init__(self, name, role, llm_handler: Callable[[str], str]):
        """
        LLMPlayer constructor.
        
        Args:
            name (str): Name of the player.
            role (str): Role of the player (e.g., "Werewolf", "Villager").
            llm_handler (Callable[[str], str]): A function that takes a prompt and returns a response from the LLM.
        """
        super().__init__(name, role)
        self.llm_handler = llm_handler

    def get_message_player(self, state_summary: dict) -> str:
        """
        Generate a message from the LLM based on the game state.

        Args:
            state_summary (dict): Summary of the current game state.

        Returns:
            str: Message generated by the LLM.
        """
        prompt = f"You are {self.role}. Current state: {state_summary}. Write a message to convince others."
        return self.llm_handler(prompt)

    def vote(self, choices: List[Player], state_summary: dict) -> Player:
        """
        Decide whom to vote for using the LLM.

        Args:
            choices (List[Player]): List of players to vote for.
            state_summary (dict): Summary of the current game state.

        Returns:
            Player: The player chosen to vote for.
        """
        prompt = (
            f"You are {self.role}. Here is the game state: {state_summary}. "
            f"The remaining players are: {', '.join([str(p) for p in choices])}. "
            "Decide which player to vote for and return their name."
        )
        response = self.llm_handler(prompt)
        for player in choices:
            if player.name in response:
                return player
        return choices[0]  # Default to the first player if no match is found.
