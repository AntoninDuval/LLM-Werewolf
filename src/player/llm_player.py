from player.base_player import Player
from typing import Callable, List
from random import choice
from loguru import logger

NAMES = ["John", "Alice", "Bob", "Charlie", "David", "Eve", "Frank", "Grace", "Hannah", "Ivan", "Julia", "Kevin", "Laura", "Michael", "Nina", "Oscar", "Paul", "Quentin", "Rachel", "Steve", "Tina", "Ursula", "Victor", "Wendy", "Xavier", "Yvonne", "Zack"]


class LLMPlayer(Player):
    def __init__(self, name, role, llm_handler: Callable[[str], str]):
        """
        LLMPlayer constructor.
        
        Args:
            name (str): Name of the player.
            role (str): Role of the player (e.g., "Werewolf", "Villager").
            llm_handler (Callable[[str], str]): A function that takes a prompt and returns a response from the LLM.
        """
        super().__init__(name, role)
        self.llm_handler = llm_handler
        self.name = choice(NAMES)

    def get_message_player(self, state_summary: dict) -> str:
        """
        Generate a message from the LLM based on the game state.

        Args:
            state_summary (dict): Summary of the current game state.

        Returns:
            str: Message generated by the LLM.
        """

        prompt_template = """
            You are {player_name}, an AI player in a Werewolf-themed game. The current state of the game is as follows:

            - **Current Phase**: {current_phase} Phase
            - **Current Day**: Day {current_day}
            - **Alive Players**: {alive_players}
            - **Dead Players**: {dead_players}
            - **Game Over**: {game_over}
            - **Winner**: {winner}

            Here is the **Chat History** of the conversation so far:
            {formatted_chat_history}

            Your Role: {player_role}
            
            ### Goals Based on Your Role:
            - **Werewolf**: Be sneaky, avoid suspicion, and manipulate the villagers.
            - **Villager**: Be cooperative, identify the werewolves, and convince others to trust you.

            ### Rules for Your Response:
            1. If you want to contribute to the conversation, compose a message and send it.
            2. If you don't want to say anything right now, wait silently.

            ONLY SPEAK IF YOU THINK YOU CAN ADD SOMETHING VALUABLE TO THE CONVERSATION.

            If so, compose a brief response of maximum 2 sentences, in casual style. Your response should aligns with your role's goals.
            If you decide to wait silently, return the token "WAITING".

            The debate ends in {remaining_debate_time} seconds.
            """

        state_summary['formatted_chat_history'] = self.format_chat_history(state_summary['chat_history'])
        state_summary['player_name'] = self.name
        state_summary['player_role'] = self.role

        output = self.llm_handler.generate_response(prompt_template=prompt_template,
                                variables=state_summary
                                )
        if output == 'WAITING':
            
            logger.info(f'Player {self.name} decided to pass')
            return ""
        else:
            return output

    def format_chat_history(self, chat_history):
        return "\n".join([f"Day {entry['day']} ({entry['phase']} Phase) - {entry['sender']}: {entry['text']}" for entry in chat_history])

    def vote(self, choices: List[Player], state_summary: dict) -> Player:
        """
        Decide whom to vote for using the LLM.

        Args:
            choices (List[Player]): List of players to vote for.
            state_summary (dict): Summary of the current game state.

        Returns:
            Player: The player chosen to vote for.
        """
        
        prompt_template = """
            You are {player_name}, an AI player in a Werewolf-themed game. The current state of the game is as follows:

            - **Current Phase**: {current_phase} Phase
            - **Current Day**: Day {current_day}
            - **Alive Players**: {alive_players}
            - **Dead Players**: {dead_players}
            - **Game Over**: {game_over}
            - **Winner**: {winner}

            Here is the **Chat History** of the conversation so far:
            {formatted_chat_history}

            Your Role: {player_role}

            ## Votes
            You need to decide whom to vote for and execute at the end of the day.

            You can vote for : {choices}

            Return A SINGLE DIGIT corresponding to the player name to tell your choice of vote.
            If you don't return a single digit, your response will be invalid.
        """
        state_summary['formatted_chat_history'] = self.format_chat_history(state_summary['chat_history'])
        state_summary['player_name'] = self.name
        state_summary['player_role'] = self.role
        state_summary['choices'] = [f"{digit} - {player_name}" for digit, player_name in enumerate(choices)]

        output = self.llm_handler.generate_response(prompt_template=prompt_template,
                                variables=state_summary
                                )
        return choices[int(output)]
